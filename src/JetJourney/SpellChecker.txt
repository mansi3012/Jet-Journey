package JetJourney;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

/**
* The SpellChecker class provides functionality to check the spelling of city
* names and suggest corrections for misspelled words.
*/
public class SpellChecker {

   private Set<String> dictionarySet;

   /**
    * Constructs a SpellChecker object and initializes the dictionary by reading
    * words from a file (cities.txt) and adding them to a HashSet.
    *
    * @throws FileNotFoundException if the file containing the city names is not
    *                               found
    */
   public SpellChecker() throws FileNotFoundException {
       dictionarySet = new HashSet<>();
       Scanner fileScanner = new Scanner(new File(JetJourney.SRC_FOLDER_PATH + "cities.txt"));
       while (fileScanner.hasNext()) {
           String cityName = fileScanner.nextLine().trim().toLowerCase();
           dictionarySet.add(cityName);
       }
       fileScanner.close();
   }

   /**
    * Checks if a given word exists in the dictionary (HashSet).
    *
    * @param word the word to check
    * @return true if the word exists in the dictionary, false otherwise
    */
   public boolean isValidWord(String word) {
       return dictionarySet.contains(word.toLowerCase());
   }

   /**
    * Suggests corrections for a misspelled word by calculating the edit distance
    * between the misspelled word and each word in the dictionary. It returns a
    * list of recommended corrections.
    *
    * @param misspelledWord the misspelled word for which corrections are needed
    * @return a list of recommended corrections, or an empty list if no
    *         recommendations are available
    */
   public List<String> getSuggestions(String misspelledWord) {
       List<String> suggestions = new ArrayList<>();

       if (isValidWord(misspelledWord)) {
           return suggestions; // Return an empty list if the word is already valid
       }

       int minEditDistance = Integer.MAX_VALUE;

       for (String correctWord : dictionarySet) {
           int editDistance = computeEditDistance(correctWord, misspelledWord);
           if (editDistance < minEditDistance) {
               minEditDistance = editDistance;
               suggestions.clear();
               suggestions.add(correctWord);
           } else if (editDistance == minEditDistance) {
               suggestions.add(correctWord);
           }
       }

       return suggestions;
   }

   /**
    * Calculates the edit distance between two strings using dynamic programming.
    *
    * @param s the first string
    * @param t the second string
    * @return the edit distance between the two strings
    */
   private int computeEditDistance(String s, String t) {
       int m = s.length();
       int n = t.length();
       int[][] dp = new int[m + 1][n + 1];

       for (int i = 0; i <= m; i++) {
           dp[i][0] = i;
       }
       for (int j = 0; j <= n; j++) {
           dp[0][j] = j;
       }

       for (int i = 1; i <= m; i++) {
           for (int j = 1; j <= n; j++) {
               if (Character.toLowerCase(s.charAt(i - 1)) == Character.toLowerCase(t.charAt(j - 1))) {
                   dp[i][j] = dp[i - 1][j - 1];
               } else {
                   dp[i][j] = 1 + Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1]));
               }
           }
       }

       return dp[m][n];
   }

   /**
    * Performs spell checking on a given word and suggests corrections if needed.
    *
    * @param word the word to check
    * @return true if the word is spelled correctly, false otherwise
    * @throws FileNotFoundException if the file containing the city names is not
    *                               found
    */
   public static boolean checkAndSuggestCorrections(String word) throws FileNotFoundException {
       SpellChecker spellChecker = new SpellChecker();

       // Check if the input contains only letters
       if (!word.matches("[a-zA-Z ]+")) {
           System.out.println("\n-----Spell Checking-----");
           System.out.println("\nError: Please enter a valid city name (containing only letters).\n");
           return false;
       }

       if (spellChecker.isValidWord(word)) {
           System.out.println("\n-----Spell Checking-----");
           System.out.println("\nThe spelling of the city name is correct!");
           return true;
       } else {
           List<String> suggestions = spellChecker.getSuggestions(word);
           if (suggestions.isEmpty()) {
               System.out.println("\n-----Spell Checking-----");
               System.out.println("\nThe entered word is not spelled correctly, and there are no recommendations for correction.\n");
           } else {
               System.out.println("\n-----Spell Checking-----");
               System.out.println("\nThe entered word is not spelled correctly. Here are some suggestions:\n");
               for (String suggestion : suggestions) {
                   System.out.println("- " + suggestion);
               }
               System.out.println("");
           }
           return false;
       }
   }
}